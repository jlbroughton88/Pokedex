{"version":3,"sources":["components/Header.js","components/Pokemon.js","components/PokemonList.js","components/pages/Home.js","components/pages/PokeSummary.js","App.js","serviceWorker.js","index.js"],"names":["MotherDiv","styled","div","Head","h1","Header","Pokemon","props","fetchData","fetch","name","then","res","json","data","setState","pokemon","id","stats","height","weight","sprites","state","isLoading","this","string","url","key","LeftDiv","NameP","charAt","toUpperCase","slice","ViewBtn","href","src","front_default","alt","React","Component","a","p","PokemonList","loadMore","prevState","currentLimit","pokemonList","currentOffset","results","map","poke","catch","error","console","log","className","LoadBtn","onClick","button","Home","PokeSummary","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7295396d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from \"styled-components\"\n\nconst Header = () => {\n    return (\n        <MotherDiv>\n            <Head>Pokedex</Head>\n        </MotherDiv>\n    )\n}\n\nconst MotherDiv = styled.div`\n    background: #ef5450;\n    color: #f4f4f4;\n    padding: 4px 8px;\n    text-align: center;\n    font-family: Pokemon;\n    font-size: 1.3rem;\n    color: #ffc81a;\n\n`\n\nconst Head = styled.h1`\ntext-shadow: -2px 0 #426291, 0 2px #426291, 2px 0 #426291\n`\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\"\nimport { Link } from \"react-router-dom\"\n\n\nclass Pokemon extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            pokemon: {\n                id: 0,\n                name: '',\n                stats: [],\n                height: '',\n                weight: '',\n                sprites: [],\n            },\n            isLoading: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    };\n\n    fetchData = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.name}`)\n            .then(res => res.json())\n            .then(data => this.setState({\n                pokemon: {\n                    id: data.id,\n                    name: data.name,\n                    stats: data.stats,\n                    height: data.height,\n                    weight: data.weight,\n                    sprites: data.sprites\n                }\n            }))\n    }\n\n    render() {\n        // Capitalize first letter\n        let capitalizeFirstLetter = (string) => {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        };\n\n        const { name, url, id } = this.props;\n        const { stats, height, weight, sprites } = this.state.pokemon;\n\n        return (\n            <MotherDiv key={name} stats={stats} height={height} weight={weight} >\n\n                <LeftDiv>\n                    <NameP>{capitalizeFirstLetter(name)}</NameP>\n                    {/* <Link to={`/poke/${name}`}>View</Link> */}\n                    <ViewBtn href={url}>View</ViewBtn>\n                </LeftDiv>\n                    <img src={sprites.front_default} alt={name}></img>\n                \n            </MotherDiv>\n        )\n    }\n}\n\nconst MotherDiv = styled.div`\n    height: 100%;\n    width: 60%;\n    padding: 5px 10px;\n    text-align: center;\n    align-self: center;\n    border: 1px grey dotted;\n    background: #f4f4f4;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    margin: 1.5%;\n    box-shadow: 0px 3px 15px rgba(0,0,0,0.2);\n    font-family: \"biko\";\n\n    @media(max-width: 600px) {\n        width: 70%;\n    }\n`\n\n\n\nconst ViewBtn = styled.a`\n    text-decoration: none;\n    padding: 1.5%;\n    color: grey;\n`\n\nconst LeftDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 100px;\n`\n\nconst NameP = styled.p`\n    font-size: 1.3rem;\n    margin: 0;\n    letter-spacing: 1px;\n`\n\nexport default Pokemon;","import React from 'react';\nimport styled from \"styled-components\"\nimport Pokemon from \"./Pokemon\"\n\n\nclass PokemonList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemonList: [],\n            isLoading: false,\n            currentLimit: 0,\n            currentOffset: 0\n        };\n    };\n\n    componentDidMount() {\n        this.fetchData()\n    };\n\n    loadMore = () => {\n        this.setState(prevState => ({ \n            currentLimit: prevState.currentLimit + 20\n        }), () => this.fetchData())\n    }\n\n    fetchData() {\n        const { currentLimit, currentOffset } = this.state;\n        fetch(`https://pokeapi.co/api/v2/pokemon/?limit=${currentLimit}&offset=${currentOffset}`)\n            .then(res => res.json())\n            .then(data => data.results.map(poke => (\n                {\n                    name: `${poke.name}`,\n                    url: `${poke.url}`\n                }\n            ))).then(pokemonList => this.setState({ pokemonList })\n            ).catch(error => console.log(\"parsing failed\", error))\n    }\n\n\n    render() {\n        const { pokemonList, isLoading } = this.state;\n\n        return (\n            <div className=\"container\">\n                {\n                    !isLoading ? pokemonList.map(poke => {\n                        const { name, url, id } = poke;\n\n                        return <Pokemon key={name} name={name} id={id} url={url} />\n                    }) : null\n                }\n                <LoadBtn className=\"loadBtn\" onClick={this.loadMore}>Load More</LoadBtn>\n            </div>\n        );\n    }\n}\n\nconst LoadBtn = styled.button`\n    align-self: center;\n    display: flex;\n    justify-content: center;\n    margin-top: 2.5%;\n    padding: 7px 12px;\n    font-size: 1rem;\n    cursor: pointer;\n    font-family: \"biko\";\n    outline: none;\n    \n    -webkit-appearance: none;\n    -moz-appearance: none;\n`\n\nexport default PokemonList;","import React from 'react'\nimport Header from \"../Header\"\nimport PokemonList from \"../PokemonList\";\n\n\n const Home = () => {\n    return (\n        <div>\n            <Header/>\n            <PokemonList/>\n        </div>\n    )\n}\n\nexport default Home","import React, { Component } from 'react'\n\n const PokeSummary = () => {\n        return (\n            <div>\n                Hello from PokeSummary\n            </div>\n        )\n    }\n\n\nexport default PokeSummary;","import React from 'react';\nimport Home from \"./components/pages/Home\"\nimport PokeSummary from \"./components/pages/PokeSummary\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <div className=\"App\"></div>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/poke\" component={PokeSummary} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}