{"version":3,"sources":["components/Header.js","components/Pokemon.js","components/PokemonList.js","components/pages/Home.js","components/pages/PokeSummary.js","App.js","serviceWorker.js","index.js"],"names":["MotherDiv","styled","div","Header","Pokemon","props","fetchData","fetch","name","then","res","json","data","setState","pokemon","id","stats","height","weight","sprites","console","log","state","isLoading","this","string","url","key","style","pokeDiv","charAt","toUpperCase","slice","to","src","front_default","alt","React","Component","width","padding","textAlign","alignSelf","border","PokemonList","loadMore","prevState","currentLimit","pokemonList","currentOffset","results","map","poke","catch","error","className","onClick","Home","PokeSummary","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c7af688.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from \"styled-components\"\n\nconst Header = () => {\n    return (\n        <MotherDiv>\n            <h1>Pokedex</h1>\n        </MotherDiv>\n    )\n}\n\nconst MotherDiv = styled.div`\n    background: #333;\n    color: #f4f4f4;\n    padding: 5px 10px;\n    text-align: center;\n`\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\n\nclass Pokemon extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            pokemon: {\n                id: 0,\n                name: '',\n                stats: [],\n                height: '',\n                weight: '',\n                sprites: [],\n            },\n            isLoading: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    };\n\n    fetchData = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.name}`)\n            .then(res => res.json())\n            .then(data => this.setState({\n                pokemon: {\n                    id: data.id,\n                    name: data.name,\n                    stats: data.stats,\n                    height: data.height,\n                    weight: data.weight,\n                    sprites: data.sprites\n                }\n            }, () => console.log(this.state.pokemon)))\n    }\n\n    render() {\n        // Capitalize first letter\n        let capitalizeFirstLetter = (string) => {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        };\n\n        const { name, url, id } = this.props;\n        const { stats, height, weight, sprites } = this.state.pokemon;\n\n        return (\n            <div key={name} style={pokeDiv} stats={stats} height={height} weight={weight} >\n                <p>{capitalizeFirstLetter(name)}</p>\n                <Link to={`/poke/${name}`}>View</Link>\n                <p>{id}</p>\n                <img src={sprites.front_default} alt={name}></img>\n            </div>\n        )\n    }\n}\n\nconst pokeDiv = {\n    width: \"60%\",\n    padding: \"5px 10px\",\n    textAlign: \"center\",\n    alignSelf: \"center\",\n    border: \"1px #333 dotted\"\n\n}\n\nexport default Pokemon","import React from 'react';\nimport Pokemon from \"./Pokemon\"\n\n\nclass PokemonList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemonList: [],\n            isLoading: false,\n            currentLimit: 0,\n            currentOffset: 0\n        };\n    };\n\n    componentDidMount() {\n        this.fetchData()\n    };\n\n    loadMore = () => {\n        this.setState(prevState => ({ \n            currentLimit: prevState.currentLimit + 20\n        }), () => this.fetchData())\n    }\n\n    fetchData() {\n        const { currentLimit, currentOffset } = this.state;\n        fetch(`https://pokeapi.co/api/v2/pokemon/?limit=${currentLimit}&offset=${currentOffset}`)\n            .then(res => res.json())\n            .then(data => data.results.map(poke => (\n                {\n                    name: `${poke.name}`,\n                    url: `${poke.url}`\n                }\n            ))).then(pokemonList => this.setState({ pokemonList })\n            ).catch(error => console.log(\"parsing failed\", error))\n    }\n\n\n    render() {\n        const { pokemonList, isLoading } = this.state;\n\n        return (\n            <div className=\"container\">\n                {\n                    !isLoading ? pokemonList.map(poke => {\n                        const { name, url, id } = poke;\n\n                        return <Pokemon key={name} name={name} id={id} url={url} />\n                    }) : null\n                }\n                <button className=\"loadMore\" onClick={this.loadMore}>Load More</button>\n            </div>\n        );\n    }\n}\n\nexport default PokemonList;","import React from 'react'\nimport Header from \"../Header\"\nimport PokemonList from \"../PokemonList\";\n\n\n const Home = () => {\n    return (\n        <div>\n            <Header/>\n            <PokemonList/>\n        </div>\n    )\n}\n\nexport default Home","import React, { Component } from 'react'\n\n const PokeSummary = () => {\n        return (\n            <div>\n                Hello from PokeSummary\n            </div>\n        )\n    }\n\n\nexport default PokeSummary;","import React from 'react';\nimport Home from \"./components/pages/Home\"\nimport PokeSummary from \"./components/pages/PokeSummary\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <div className=\"App\"></div>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/poke\" component={PokeSummary} />\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}